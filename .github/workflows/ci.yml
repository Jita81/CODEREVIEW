name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install urllib3
        
    - name: Run linting
      run: |
        flake8 ai_code_review_tool.py --max-line-length=120 --ignore=E203,W503,E501,W291,W293 || true
        black --check ai_code_review_tool.py || true
        isort --check-only ai_code_review_tool.py || true
        
    - name: Run type checking
      run: |
        mypy ai_code_review_tool.py --ignore-missing-imports --no-strict-optional || true
        
    - name: Run tests
      run: |
        pytest tests/ -v --cov=ai_code_review_tool --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Run security scan
      uses: github/codeql-action/init@v3
      with:
        languages: python
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      
    - name: Run Bandit security linter
      run: |
        python -m pip install --upgrade pip
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true
        
    - name: Upload security report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: bandit-report.json
        retention-days: 30

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install urllib3
        
    - name: Test tool functionality
      run: |
        # Test help command
        python ai_code_review_tool.py --help
        
        # Test with mock API key (should fail gracefully)
        ANTHROPIC_API_KEY=test python ai_code_review_tool.py --help
        
        # Test file parsing
        echo "print('hello world')" > test_file.py
        python ai_code_review_tool.py test_file.py --output json --no-cache || true
        
    - name: Cleanup
      run: |
        rm -f test_file.py
        rm -rf .ai_review_cache
